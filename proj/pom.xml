<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!-- 父项目的坐标:如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID,artifact ID和 version. -->
    <modelVersion>4.0.0
    </modelVersion><!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
    <groupId>com.wtk
    </groupId><!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
    <artifactId>proj-parent</artifactId><!--被继承的父项目的构件标识符 -->
    <packaging>pom</packaging><!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
    <version>1.0-SNAPSHOT</version>              <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
    <name>proj</name>                          <!--项目的名称, Maven产生的文档用 -->
    <url>http://maven.apache.org</url>              <!--项目主页的URL, Maven产生的文档用 -->
    <description>proj项目文档</description>

    <modules>
        <module>proj-model</module>
        <module>proj-dao</module>
        <module>proj-service</module>
        <module>proj-web</module>
    </modules>

    <!-- 主要依赖库的版本定义：描述了这个项目构建环境中的前提条件. -->
    <properties>
        <!-- main version setting -->
        <junit.version>4.12</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
        <mybatis.version>3.4.2</mybatis.version>
        <mysql.driver.version>5.1.40</mysql.driver.version>
        <druid.version>1.0.26</druid.version>
        <shiro.version>1.3.2</shiro.version>
        <!-- tools version setting -->
        <mybatis-spring.version>1.3.1</mybatis-spring.version>
        <mybaitsplus.version>2.0.1</mybaitsplus.version>
        <ehcache.version>3.1.3</ehcache.version>
        <sitemesh.version>3.0.1</sitemesh.version>
        <quartz.version>2.2.3</quartz.version>
        <jackson.version>2.8.4</jackson.version>
        <fastjson.version>1.2.20</fastjson.version>
        <log4j2.version>2.7</log4j2.version>
        <slf4j.version>1.7.21</slf4j.version>
        <commons-io.version>2.4</commons-io.version>
        <commons-fileupload.version>1.3.1</commons-fileupload.version>
        <javax.servlet-api.version>4.0.0-b01</javax.servlet-api.version>
        <velocity.version>1.7</velocity.version>

        <!-- environment setting -->
        <jdk.version>1.8</jdk.version>
        <proj.version>1.0.0-SNAPSHOT</proj.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。 -->
    <dependencyManagement>
        <!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载. -->
        <dependencies>

            <!-- 1.TEST:单元测试框架 begin -->
            <dependency>
                <groupId>junit</groupId>                <!--依赖的group ID -->
                <artifactId>junit</artifactId>        <!--依赖的artifact ID -->
                <version>${junit.version}</version>    <!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->
                <scope>test</scope>                        <!-- 依赖项的适用范围：test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 -->
            </dependency>
            <!-- TEST end -->

            <!-- 2.SPRING相关依赖 begin -->
            <!-- ①.spring核心依赖 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>    <!--包含Spring框架基本的核心工具类 -->
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>    <!--springIoC（依赖注入）的基础实现 -->
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>    <!--spring 提供在基础 IoC 功能上的扩展服务 -->
                <version>${spring.version}</version>
            </dependency>

            <!-- ②.spring 持久层依赖 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>        <!--封装了spring对于事物的控制 -->
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>    <!--包含对Spring对JDBC数据访问进行封装的所有类 -->
                <version>${spring.version}</version>
            </dependency>

            <!-- ③.spring web相关依赖 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web
                </artifactId>        <!--包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入 WebApplicationContext 特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类 -->
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>    <!--Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架 -->
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- ④.spring test依赖 -->
            <dependency>
                <groupId>org.springframework</groupId>    <!--与Junit单元测试、集成测试 -->
                <artifactId>spring-test</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <!-- ⑤.spring 其它依赖 -->
            <dependency>
                <groupId>org.springframework</groupId>    <!--spring面向切面编程，提供AOP（面向切面编程） -->
                <artifactId>spring-aop</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-oxm</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- SPRING相关依赖 end -->

            <!-- 3.SERVLET WEB begin -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId><!--j2ee web spec -->
                <version>${javax.servlet-api.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>              <!--JSTL标签类 -->
                <version>1.2</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId> <!--jackson json:高性能的JSON处理 -->
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>          <!-- 格式化对象，方便输出日志 -->
                <version>${fastjson.version}</version>
            </dependency>
            <!-- SERVLET WEB end -->

            <!-- 4.MYBATIS 持久层框架 begin -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis-spring.version}</version>
            </dependency>
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus</artifactId>        <!-- mybatis-plus Mybatis增强辅助工具 -->
                <version>${mybaitsplus.version}</version>
            </dependency>
            <!-- MYBATIS 持久层框架 end -->

            <!-- 5.MYSQL 数据库相关依赖 begin -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId><!-- 导入Mysql数据库驱动包 -->
                <version>${mysql.driver.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId><!-- connection pool:数据库连接池,用来在spingMVC-mybatis.xml中配置数据库 -->
                <version>${druid.version}</version>
            </dependency>
            <!-- MYSQL 数据库相关依赖 end -->

            <!-- 6.LOG 日志相关依赖 begin -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>            <!--核心log4j2jar包 -->
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>   <!-- 桥接：告诉Slf4j使用Log4j2 -->
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jcl</artifactId>        <!-- 桥接：告诉commons logging使用Log4j2 -->
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>            <!-- slf4j -->
                <version>${slf4j.version}</version>
            </dependency>
            <!-- LOG 日志相关依赖 end -->

            <!-- 7.安全框架SECURITY:shiro begin -->
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-core</artifactId>
                <version>${shiro.version}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>slf4j-api</artifactId>
                        <groupId>org.slf4j</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-spring</artifactId>
                <version>${shiro.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-ehcache</artifactId>
                <version>${shiro.version}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>slf4j-api</artifactId>
                        <groupId>org.slf4j</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- 安全框架SECURITY:shiro end -->

            <!-- ehcache:缓存框架 begin -->
            <dependency>
                <groupId>org.ehcache</groupId>
                <artifactId>ehcache</artifactId>
                <version>${ehcache.version}</version>
            </dependency>
            <!-- ehcache:缓存框架 end -->

            <!-- redis:缓存框架 begin -->
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-redis</artifactId>
                <version>1.7.5.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>redis.clients</groupId>
                <artifactId>jedis</artifactId> <!--  Java 客户端开发包 -->
                <version>2.9.0</version>
            </dependency>
            <!-- redis:缓存框架 end -->

            <!-- spring 定时:Quartz 时间配置详解 -->
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz</artifactId>
                <version>${quartz.version}</version>
            </dependency>

            <!-- 验证码工具 -->
            <dependency>
                <groupId>com.github.penggle</groupId>
                <artifactId>kaptcha</artifactId>
                <version>2.3.2</version>
            </dependency>

            <!-- 获取User Agent用户代理:解析客户端操作系统、浏览器等 -->
            <dependency>
                <groupId>eu.bitwalker</groupId>
                <artifactId>UserAgentUtils</artifactId>
                <version>1.20</version>
            </dependency>

            <!-- 上传组件包-->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons-fileupload.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>

            <!-- RSA加密工具  -->
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcprov-jdk15on</artifactId>
                <version>1.55</version>
            </dependency>
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>1.10</version>
            </dependency>
            <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>2.4</version>
            </dependency>

            <!-- mail -->
            <dependency>
                <groupId>javax.mail</groupId>
                <artifactId>mail</artifactId>
                <version>1.5.0-b01</version>
            </dependency>
            <dependency>
                <groupId>javax.activation</groupId>
                <artifactId>activation</artifactId>
                <version>1.1.1</version>
            </dependency>

            <!-- 使用Velocity 模板引擎快速生成代码 -->
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity</artifactId>
                <version>${velocity.version}</version>
            </dependency>

            <!-- Commons项目中用来处理Java基本对象方法的工具类包 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.5</version>
            </dependency>

            <!-- 网页布局和修饰的框架包 -->
            <dependency>
                <groupId>org.sitemesh</groupId>
                <artifactId>sitemesh</artifactId>
                <version>${sitemesh.version}</version>
            </dependency>

            <!-- dubbo服务提供者依赖 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>dubbo</artifactId>
                <version>2.5.3</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.101tec</groupId>
                <artifactId>zkclient</artifactId>
                <version>0.2</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <!-- 构建项目需要的信息 -->
    <build>
        <!--<finalName>morning</finalName>    &lt;!&ndash;产生的构件的文件名，默认值是${artifactId}-${version}。 &ndash;&gt;-->
        <plugins>
            <!-- maven-compiler-plugin: 编译插件(maven-compiler-plugin用来编译Java代码) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <source>${jdk.version}</source>  <!-- 源代码使用的开发版本 -->
                    <target>${jdk.version}</target>  <!-- 需要生成的目标class文件的编译版本 -->
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- maven-assembly-plugin：处理资源 (maven-resources-plugin则用来处理资源文件。默认的主资源文件目录是src/main/resources，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- 开发者信息 -->
    <developers>
        <developer>
            <name>wangtongkang</name>
            <id>wangtongkang</id>
            <email>513190048@qq.com</email>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone>+8</timezone>
        </developer>
    </developers>
</project>
